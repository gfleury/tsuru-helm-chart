{{- if eq .Values.gandalf.enabled true }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "tsuru.fullname" . }}-gandalf-env-var
  labels:
    app: {{ template "tsuru.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  TSURU_TOKEN: ""
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "tsuru.fullname" . }}-gandalf-git-hook
  labels:
    app: {{ template "tsuru.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  pre-receive: |-
    #!/bin/bash -el

    # This script generate archives and deploy applications using tsuru api.
    #
    # It depends on the following environment variables:
    #
    #   - TSURU_HOST: URL to the Tsuru API (for example: http://yourtsuru:8080)
    #   - TSURU_TOKEN: the token to communicate with the API (generated with
    #                  `tsurud token`, in the server).

    while read oldrev newrev refname
    do
            set +e
            echo $refname | grep -v tags/master$ | grep -q /master$
            status=$?
            set -e
            if [ $status = 0 ]
            then
                    COMMIT=${newrev}
            fi
    done

    if [ -z ${COMMIT} ]
    then
      echo "ERROR: please push to master"
      exit 3
    fi

    git_archive_all() {
        REV=$1; FILE=$2
        TMP_WORK_DIR=$(mktemp -d)
        chmod 755 $TMP_WORK_DIR
        unset GIT_DIR GIT_WORK_TREE
        git clone -q $PWD $TMP_WORK_DIR &> /dev/null
        pushd $TMP_WORK_DIR > /dev/null
        git config advice.detachedHead false
        git checkout $REV > /dev/null
        git submodule update --init --recursive > /dev/null
        find -name .git -prune -exec rm -rf {} \; > /dev/null
        tar zcf /tmp/$FILE .
        popd > /dev/null
        rm -rf $TMP_WORK_DIR > /dev/null
    }

    APP_DIR=${PWD##*/}
    APP_NAME=${APP_DIR/.git/}
    UUID=`python -c 'import uuid; print uuid.uuid4().hex'`
    ARCHIVE_FILE_NAME=${APP_NAME}_${COMMIT}_${UUID}.tar.gz
    git_archive_all $COMMIT $ARCHIVE_FILE_NAME
    archive_url="/tmp/${ARCHIVE_FILE_NAME}"
    url="${TSURU_HOST}/apps/${APP_NAME}/deploy"
    curl -H "Authorization: bearer ${TSURU_TOKEN}" -F "file=@${archive_url}" -F "commit=${COMMIT}" -F "user=${TSURU_USER}" -s -N $url | tee /tmp/deploy-${APP_NAME}.log
    rm /tmp/${ARCHIVE_FILE_NAME}
    tail -1 /tmp/deploy-${APP_NAME}.log | grep -q "^OK$"

{{- end }}
